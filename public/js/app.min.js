function baseUrl() {
    var win_loc = window.location;
    if (win_loc.host === 'localhost') {
        return win_loc.protocol + "//" + win_loc.host + "/edutube/public/";
    }
    return win_loc.protocol + "//" + win_loc.host + "/remote/host/path/";
};

function debug_console(msg) {
    var win_loc = window.location;
    if (win_loc.host === 'localhost') {
            console.log(msg);
    }
}

function errorResponse(xhr, status, error) {
    debug_console(xhr);
    debug_console(status);
    debug_console(error);
}

var items = {
    videoPrev       : null,
    this_video_prev : null,
    framePrev       : null,
    modalInfo       : null
}

var utils = {
    'width_window'        : 0,
    'height_window'       : 0,
    'left_dist'           : 0,
    'right_dist'          : 0,
    'incomplete_cover_dx' : false,
    'biggerMediafiles'    : null,
    'x'                   : null,
    'y'                   : null
}

var html = {
    'prev_cover' : "<div class='prev_cover'></div>",
    'ombra_dx'   : "<div class='ombra_dx'></div>",
    'ombra_sx'   : "<div class='ombra_sx'></div>"
}

// HANDLERS

/**
 * 
 * @param {type} width_img
 * @param {type} height_img
 * @param {type} container
 * @returns {resizeImage.css|Object}
 */
function resizeImage(width_img, height_img, container) {
    
    var new_h_img_width_cont = (height_img/width_img)*container.width();
    console.log(container.height());
    
    var css = new Object();

    if (new_h_img_width_cont <= container.height()) {
        var width_num = ((width_img/height_img)*container.height());
        var height_num = container.height();
        css['width']       = width_num + 'px';
        css['height']      = height_num + 'px';
        css['margin-top']  = '0px';
        css['margin-left'] = (-(width_num-container.width())/2) + 'px';
    }
    else {
        css['width']       = container.width() + 'px';
        css['height']      = new_h_img_width_cont + 'px';
        css['margin-top']  = (-(new_h_img_width_cont - container.height())/2) + 'px';
        css['margin-left'] = '0px';
    }

    return css;
};


function dist_from_top(elem) {
    var scrollTop     = $(window).scrollTop();
    var elementOffset = elem.offset().top;
    
    return (elementOffset - scrollTop);
}

/**
 * 
 * @param {type} this_video_prev
 * @param {type} ombra
 * @param {type} left_mod
 * @param {type} cover
 * @returns {undefined}
 */
function show_incomplete_prev(this_video_prev, ombra, left_mod, cover) {
    
    $(this_video_prev).css({'z-index': 200});
    $(this_video_prev).append(ombra);
    cover.append(html.prev_cover);

    $(this_video_prev).stop(true).animate({
        'left': left_mod
    }, 
    {
        duration : 100,
        start: function() {
            cover.find(".prev_cover").hide();

            $(this_video_prev).find($(ombra).attr("class")).hide();

            cover.find(".prev_cover").fadeTo(100, 0.5);
            $(this_video_prev).find($(ombra).attr("class")).fadeTo(100, 1);
        }
    });
}

/**
 * 
 * @param {type} this_video_prev
 * @param {type} ombra
 * @param {type} left_mod
 * @param {type} cover
 * @returns {undefined}
 */
function hide_incomplete_prev(this_video_prev, ombra, left_mod, cover) {
    
    $(this_video_prev).stop(true).animate({
        'left': left_mod
    }, 
    {
        duration : 100,
        start: function() {

            cover.find(".prev_cover").fadeTo(100, 0, function(){
                $(this).remove();
            });

            $(this_video_prev).find("."+$(ombra).attr("class")).fadeTo(100, 0, function() {
                $(this).remove();
            });
        },
        end: function() {
            $(this_video_prev).css({'z-index': 0});
        }
    });
}

// LISTENERS

$(window).on('load', function(event){
/*
    utils.width_window = $(window).width();
    utils.height_window = $(window).height();

    $('#main').isotope({
        masonry : {
            columnWidth : 320,
            isFitWidth: true,
            gutter: 10
        }
    });
*/
});

$(window).on('resize', function(){
    
    ///TODO aggiustare solo l'altezza
    /*var modal       = $('.modal-info-video');
    var img_header  = modal.find('#img-prev-video');
    
    var height = (modal.find('.img-video').width()/16)*9;
    var total_height = height + $('.video-info-modal ').outerHeight() + $('.dati-video').outerHeight() + $('.header').outerHeight() + 60;

    if (total_height > $(window).height()) {
        height = height - (total_height-$(window).height());
    }
    
    modal.find('.img-video').css({'height':height+'px'})
    img_header.css(resizeImage(utils.biggerMediafiles.width, utils.biggerMediafiles.height, modal.find('.img-video')));*/
    
});

$(document).ready(function(){
    /*$( ".modal-info-video" ).scroll(function(){
        console.log(dist_from_top($('.modal-dialog-info-video')));
        
        if (dist_from_top($('.modal-dialog-info-video'))<=0) {
            $(this).find(".header").css({'position': 'fixed', 'z-index': 1000, 'top': '0px'});
        }
        else {
            $(this).find(".header").css({'position': 'relative', 'z-index': 1});
        }
    });*/
    
    
    var player = null;
    
    $('#myModal').on('hidden.bs.modal', function (e) {
        console.log('stai qui?');
        stopVideo();
    })
    
    $(document).on('click', '#play-video', function() {
        console.log($(this));
        
        $(".sfondo-grid").append("<div id='video-cont' style='position: absolute; width:100%; height:100%; top:0px; padding-bottom:inherit'></div>");
        
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        
        var id = $(this).attr("data-videoid");
        console.log(id);
        player = new YT.Player('video-cont', {
            videoId: id,
            playerVars: {
                'showinfo': 0,
                'modestbranding': 0,
                'rel': 0
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });/**/
        
    });
    
    function onPlayerStateChange(event) {
        
        switch (event.data) {
            case -1: return null; break;
            case 0 : 
                console.log('stooooooooop');
                stopVideo(); 
                break;
            default: return null; break;
        }
        
        /*var max_quality = event.target.getAvailableQualityLevels()[0];
        var current_quality = event.target.getPlaybackQuality();
        
        console.log(max_quality);
        console.log(current_quality);
        
        if (current_quality !== max_quality) {
            event.target.setPlaybackQuality(max_quality);
        }*/
        
    }
    
    function onPlayerReady(event) {
        console.log('play');
        //event.target.setPlaybackQuality('default');
        event.target.playVideo();
    }
    
    function stopVideo() {
        if (player != null) {
            player.stopVideo();
            player.clearVideo();
            player.destroy();
            $("#video-cont").remove();
            player = null;
        }
    }
    
    $(document).on('mousemove mouseenter', function(event) {
        utils.x = event.pageX;
        utils.y = event.pageY;
    }); 
    

    /*$('#floating_player').click(function(e){
        console.log(e)
    })*/
    
});
var app = angular.module('edutube', ['ngRoute', 'ngAnimate'], function($interpolateProvider) {
    $interpolateProvider.startSymbol('{??');
    $interpolateProvider.endSymbol('??}');
});

/*app.run(function(){
    
});

app.config(function($routeProvider, $locationProvider) {
    $routeProvider.when('/',{
        templateUrl: 'angular/templates/viewPreview.template.html',
        controller: 'postWallController'
    });
});*/
/**
 * 
 * @param {type} param1
 * @param {type} param2
 */
app.filter('dateToISO', function() {
    return function(input) {
        if (input != undefined) {
            var goodTime = input.replace(/(.+) (.+)/, "$1T$2Z");
            return goodTime;
        }
        return null;
    };
});

/**
 * 
 */
app.filter('imgByName', function(){
    return function(input, name) {
        
        var imgUrl = '';
        $.each(input, function(i, obj) {
            if (obj.nome === name) {
                imgUrl = obj.url;
                return false;
            }
        });
        
        if (imgUrl === '') {
            return 'placeholder';
        }
        return imgUrl;
    };
});
app.directive('isoRepeat', function ($timeout, dataService ) {
    return {
        scope: {
            items: '=isoRepeat'
        },
        templateUrl: 'angular/templates/viewPreview.template.html',
        link: function (scope, element, attrs) {

            var options = {
                itemSelector: '.video-prev',
                animationEngine : 'jquery',
                //percentPosition: true,
                masonry : {
                    columnWidth : '.video-prev',
                    isFitWidth: true,
                    gutter: 10
                }
            };

            $('#main-news').css({'overflow':'hidden'})

            $('.fluid-container')
                .find('img')
                .css(resizeImage(1920, 1080, $('#main-news')));

            element.isotope(options);



            scope.$watch('items', function(newVal, oldVal){
                $timeout(function(){
                    element.isotope( 'reloadItems' ).isotope({ sortBy: 'original-order' });


                }, true);
            });

            /*
            element.on('layoutComplete',
                function() {
                    $('.post-open').css({'width':'100%'});
                }
            )
            */

            scope.modalInfoShow = function(item, modal_sel){
            //scope.modalInfoShow = function(item, selected_elem){

                /*var last_item = $(".video-prev").filter(function() { 
                    return $(this).offset().top == $(selected_elem).offset().top 
                }).last();

                last_item.after("<div class='video-prev post-open'></div>");

                element.isotope( 'reloadItems' ).isotope({ sortBy: 'original-order' }); */


                //console.log($((element).children("#"+filtered_items.last().attr('id'))));

                // INIT MODAL
                var modal = $(modal_sel);

                $('.modal-dialog').css({
                    //'margin': '0 auto',
                    'width': '100%'
                });
                $('.draggable-box').attr('style', '');

                $('.modal-dialog').draggable({
                    containment: "parent",
                    snap: "#myModal",
                    stop: function(event, ui) {
                    }
                });




                dataService.post = item;

                // TODO: ora che c'è la direttiva funcionante tutta questa parte può essere sbrigata dal template
                //var title            = item.title;
                var mediafiles       = item.mediafiles;
                var img_header       = modal.find('#img-prev-video');

                // si cerca l'ultimo file che dovrebbe essere il più grande possible
                // TODO: da verificare
                $.each(mediafiles, function(i, obj) {
                    utils.biggerMediafiles = obj;
                });



                img_header.attr('src', utils.biggerMediafiles.url);
                img_header.one('load', function () {

                    // lo metto prima se no il 100% viene inteso come 100px, possibile bug jquery
                    //modal.fadeTo(200, 1);
                    //modal.on('show.bs.modal', function () {

                        var height = (modal.find('.img-video').width()/16)*9;
                        var total_height = height + $('.video-info-modal ').outerHeight() + $('.dati-video').outerHeight() + $('.header').outerHeight() + 60;

                        if (total_height > $(window).height()) {
                            height = height - (total_height-$(window).height());
                            console.log(height);
                        }

                        //modal.find('.img-video').css({'height':height+'px'})
                        modal.find('.img-video').css({
                            'height': '100%', 
                            'padding-bottom': $('.video-info-modal').outerHeight() + 'px'
                        });
                        img_header.css(resizeImage(utils.biggerMediafiles.width, utils.biggerMediafiles.height, modal.find('.img-video')));

                    //});
                    //modal.find('.img-video').find('p').text(title);

                    //TODO: inserire spinner
                    //TODO: vedere se si riesce a sistemare la transizione fade

                });

                //modal.find('.img-video').css({'height': '100%'});

                $('.modal-dialog').resizable({
                    handles: "n, e, s, w, se",
                    resize: function( event, ui ) {
                        modal.find('.img-video').css({
                            'height': '100%', 
                            'padding-bottom': $('.video-info-modal').outerHeight() + 'px'
                        });
                        img_header.css(resizeImage(utils.biggerMediafiles.width, utils.biggerMediafiles.height, modal.find('.img-video')));
                    }
                });



                //$('body').addClass('noscroll');
            }
        }
    }
});

app.directive('ngHover', ['$animate', function($animate) {
    return function(scope, element, attrs) {

        element.hover(
            function() {
                utils.left_dist       = element.offset().left;
                utils.right_dist      = $(window).width() - (element.offset().left + element.width());

                if (utils.left_dist<0) {

                    // elemento a sinistra parzialmente visibile

                    var ombra = html.ombra_dx;
                    var left_mod = "+=" + ((-utils.left_dist) + 10) + "px";
                    var cover = element.next();

                    show_incomplete_prev(element, ombra, left_mod, cover);
                }
                else if (utils.right_dist<0) {

                    // elemento a destra parzialmente visibile

                    var ombra = html.ombra_sx;
                    var left_mod = "-=" + ((-utils.right_dist) + 10)  + "px";
                    var cover = element.prev();

                    show_incomplete_prev(element, ombra, left_mod, cover);    
                }/**/
            },
            function() {
                if (utils.left_dist<0) {

                    var ombra = html.ombra_dx;
                    var left_mod = 0;
                    var cover = element.next();

                    hide_incomplete_prev(element, ombra, left_mod, cover);
                }
                else if (utils.right_dist<0) {

                    var ombra = html.ombra_sx;
                    var left_mod = element.prev().position().left + element.width() + 10 + "px";
                    var cover = element.prev();

                    hide_incomplete_prev(element, ombra, left_mod, cover);
                }
            }
        );

        element.hover(
            function() {
            
                element.find('.frame-prev').stop(true).animate({
                    'border-width' : '4px'
                },100);

                element.find('.video-instruments').stop(true).animate({
                    'top' : -$(this).find('.video-instruments').innerHeight() + 'px'
                },100);

                element.find('.cover-prev-img').fadeTo(100, 1);

            },
            function() {
                element.find('.frame-prev').stop(true).animate({
                    'border-width' : '0px'
                },100);

                element.find('.video-instruments').stop(true).animate({
                    'top' : '0px'
                },100);

                element.find('.cover-prev-img').fadeTo(100, 0);
                
                // se il menu è aperto, lasciando la preview si chiude
                element
                    .find('.video-instruments ')
                    .find(".dropdown-toggle[aria-expanded=true]")
                    .dropdown("toggle");
            }
        );
    }
}]);

app.directive('ngOnshow', function ($timeout, dataService) {
    
    return function(scope, element, attrs) {
        scope.$watch(function() {
                return dataService.post;
            }, 
            function(value, oldValue) {
                scope.setModalGraphic()
            }, 
            true);/**/
    }
});

app.directive('ngFixedmenu', function($window) {
    
    return function(scope, element, attrs) {
        /*$(window).on('scroll',function() {
            if ($(window).scrollTop()>500) {
                $(element).addClass('fixed-menu');
                $("#main-cont").css({'margin-top':'40px'});
                
            }
            
            else {
                $(element).removeClass('fixed-menu');
                $("#main-cont").css({'margin-top':'0px'});
            }
        })*/
        
        //angular.element($window).bind('scroll', function () {
       /* element.bind('scroll', function () {
            
            if ($window.scrollY>500) {
                scope.fixed = true;
            }
            else {
                scope.fixed = false;
            }
            
            console.log(element);
            
            scope.$apply();
        });*/
        
        scope.$watch(function(){
                return element[0].getBoundingClientRect().top + $window.pageYOffset;
            }, 
            function(newValue, oldValue){
                console.log(newValue + ", " + oldValue)
            }
        );
    };
    
})
/**
 * 
 * @param {type} param1
 * @param {type} param2
 */
app.controller('ItemsCtrl', function ItemsCtrl($scope, $timeout, dataService) {
    
    /**
     * 
     * @returns {undefined}
     */
    $scope.update = function() {
        
        dataService.get().then(function (data) {                       
            $scope.collection = data;
        });
    };
    
    $scope.update(); 
    
});

/**
 * 
 */
app.controller('modalInfoCtrl', function modalInfoCtrl($scope, dataService, $interval){
    
    /**
     * 
     * @returns {undefined}
     */
    $scope.setModalGraphic = function() {
        $scope.item = dataService.post;
    };
    
    /**
     * 
     * @param {type} modal_sel
     * @returns {undefined}
     */
    $scope.modalInfoHide = function(modal_sel) {
        
        var modal = $(modal_sel);
        modal.attr('hideon', 0);
        
        modal.fadeTo(200, 0, function() {
            modal.css({'z-index': -1000});
        });
        
        $('html, body').removeClass('noscroll');
    } 
    
    /**
     * 
     * @param {type} box
     * @returns {undefined}
     */
    $scope.showBox = function(box) {
        $(box).css({'z-index': 1000});
        $(box).fadeTo(100, 1);
        
        var widthModalDialog = $('.modal-dialog').width();
        
        $(box).draggable({
            containment: "parent",
            snap: "#myModal",
            stop: function(event, ui) {
                
                /*var positionRightDraggableBox = $(window).width()-(ui.position.left + $(box).width());
                
                console.log("ui.position.left: " + ui.position.left);
                console.log("$(box).width(): " + $(box).width());
                console.log("positionRightDraggableBox: " + positionRightDraggableBox);
                
                if (positionRightDraggableBox <= 30) {
                    $('.modal-dialog').css({
                        'width': (widthModalDialog - $(box).width() - 30) + 'px',
                        'margin' : '0 auto 0 0'
                    });
                }
                else {
                    $('.modal-dialog').css({
                        'width': '100%',
                        'margin' : '0 auto'
                    });
                }*/
            }
        });
        $(box).resizable({
            handles: "n, e, s, w, se",
            resize: function( event, ui ) {
                
            }
        });
    }
    
    /**
     * 
     * @param {type} box
     * @returns {undefined}
     */
    $scope.hideBox = function(box) {
        $(box).fadeTo(100, 0, function() {
            $(box).css({'z-index': -1000});
        });
    }
    
    /**
     * 
     * @param {type} target
     * @param {type} other_boxes
     * @returns {undefined}
     */
    $scope.focus = function(target, other_boxes) {

        $(other_boxes).css({'z-index': 999});
        $(target).css({'z-index': 1000});
    }
    
    /*$scope.$watch(function() { return $scope.fixed }, function(newValue, oldValue) {
        
            console.log(newValue+" "+oldValue);
            if (newValue != oldValue) {
                if (newValue) {
                    $('nav').addClass('fixed-menu');
                }
                else {
                    $('nav').removeClass('fixed-menu');
                }
            }
        },true
    );*/
    
    /**
     * 
     * @param {type} box
     * @returns {undefined}
     */
    $scope.pushpin = function(box) {
        $('#myModal').modal('hide');
        $(box).fadeTo(1, 200).draggable();
    }
    
    /*var promise;      
    var holded = false;

    $scope.mouseDown = function() {
        promise = $interval(function () { 
            holded = true;
        }, 1000);
    };

    $scope.mouseUp = function () {
        holded = false;
        $interval.cancel(promise);
    };
    
    $scope.$watch(function(){ return holded;}, function(newValue, oldValue) {
        
        if (newValue != oldValue) {
            if (newValue) {
                //hold
                
                
                console.log(utils.x);
                console.log(utils.y);
            }
            else {
                //release
                
            }
        }
    },true);*/
});

app.controller('menuCtrl', function menuCtrl($scope, $window) {
    
    console.log($scope);
    
    // conservare
    $scope.$watch(function() { return $scope.fixed }, function(newValue, oldValue) {
        
            console.log(newValue+" "+oldValue);
            if (newValue != oldValue) {
                if (newValue) {
                    $('nav').addClass('fixed-menu');
                }
                else {
                    $('nav').removeClass('fixed-menu');
                }
            }
        },true
    );/**/
    
})
/**
 * 
 * @param {type} param1
 * @param {type} param2
 */
app.service('dataService', function ($http) {
    return {
        get: function () {
            var promise = $http
                .get(baseUrl() + 'api/posts')
                .then(function (resp) {
                    return resp.data.featured;
                });
            return promise;
        },
        post: null 
    };
});
//# sourceMappingURL=app.min.js.map